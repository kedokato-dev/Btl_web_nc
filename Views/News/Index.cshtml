@model NewsViewModel

<link rel="stylesheet" href="~/css/news.css" asp-append-version="true" />



<div class="container mt-4">
    <h1 class="mb-4 text-center">@Model.Newsletter.Topic</h1>
    <div id="articles-container" class="row">
        @foreach (var article in Model.Articles)
        {
            <div class="col-md-4 mb-4">
                <div class="card article-card h-100" onclick="window.open('@article.Link', '_blank')">
                    @if (!string.IsNullOrEmpty(article.ImageUrl))
                    {
                        <div class="card-image">
                            <img src="@article.ImageUrl" class="card-img-top" alt="Article Image">
                        </div>
                    }
                    <div class="card-body">
                        <h5 class="card-title">@article.Title</h5>
                        <p class="card-text">@article.Summary</p>
                    </div>
                    <div class="card-footer text-muted text-end">
                        <small>Ng√†y ƒëƒÉng: @article.PublishedAt?.ToString("dd/MM/yyyy HH:mm")</small>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div id="pagination-container" class="d-flex justify-content-center mt-4">
    <nav>
        <ul class="pagination">
            @if (Model.TotalPages > 1)
            {
                <!-- Previous page button -->
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link pagination-link" data-page="@(Model.CurrentPage - 1)"
                        href="javascript:void(0);">&laquo;</a>
                </li>

                @* Calculate range of page numbers to display *@
                int startPage = Math.Max(1, Model.CurrentPage - 2);
                int endPage = Math.Min(Model.TotalPages, startPage + 4);

                @* Ensure we show at least 5 pages if available *@
                if (endPage - startPage < 4)
                {
                    startPage = Math.Max(1, endPage - 4);
                }

                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link pagination-link" data-page="1" href="javascript:void(0);">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                        <a class="page-link pagination-link" data-page="@i" href="javascript:void(0);">@i</a>
                    </li>
                }

                @if (endPage < Model.TotalPages)
                {
                    @if (endPage < Model.TotalPages - 1)
                    {
                        <li class="page-item disabled">
                            <span class="page-link">...</span>
                        </li>
                    }
                    <li class="page-item">
                        <a class="page-link pagination-link" data-page="@Model.TotalPages"
                            href="javascript:void(0);">@Model.TotalPages</a>
                    </li>
                }

                <!-- Next page button -->
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link pagination-link" data-page="@(Model.CurrentPage + 1)"
                        href="javascript:void(0);">&raquo;</a>
                </li>
            }
        </ul>
    </nav>
</div>

<div id="loading-overlay" class="position-fixed d-none"
    style="top:0; left:0; width:100%; height:100%; background:rgba(255,255,255,0.7); z-index:1000; display:flex; justify-content:center; align-items:center;">
    <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(function () {
            // L∆∞u tr·ªØ newsletterId
            const newsletterId = @Model.Newsletter.Id;
            let isLoading = false;

            // H√†m t·∫£i b√†i vi·∫øt cho trang c·ª• th·ªÉ
            function loadArticles(page) {
                // NgƒÉn c√°c y√™u c·∫ßu ƒë·ªìng th·ªùi
                if (isLoading) return;
                isLoading = true;

                // Hi·ªÉn th·ªã overlay loading
                $('#loading-overlay').removeClass('d-none');

                // C·∫≠p nh·∫≠t URL v·ªõi tham s·ªë trang m√† kh√¥ng t·∫£i l·∫°i
                const url = new URL(window.location.href);
                url.searchParams.set('page', page);
                window.history.pushState({ page }, '', url);

                $.ajax({
                    url: '/News/GetPagedArticles',
                    type: 'GET',
                    data: { newsletterId: newsletterId, page: page },
                    dataType: 'json',
                    success: function (response) {
                        if (response.success) {
                              console.log(response.articlesHtml); // üëà Th√™m d√≤ng n√†y ƒë·ªÉ debug
                            // C·∫≠p nh·∫≠t DOM v·ªõi n·ªôi dung m·ªõi
                            $('#articles-container').html(response.articlesHtml);
                            $('#pagination-container').html(response.paginationHtml);
                            // ƒê·∫£m b·∫£o CSS ƒë∆∞·ª£c √°p d·ª•ng cho ph·∫ßn t·ª≠ m·ªõi
                            // Kh√¥ng c·∫ßn th√™m link CSS m·ªõi v√†o head

                            // Cu·ªôn l√™n ƒë·∫ßu container b√†i vi·∫øt
                            $('html, body').animate({
                                scrollTop: $('#articles-container').offset().top - 20
                            }, 200);

                            // G·∫Øn l·∫°i s·ª± ki·ªán cho c√°c n√∫t ph√¢n trang m·ªõi
                            attachPaginationEvents();
                        } else {
                            // X·ª≠ l√Ω l·ªói t·ª´ server
                            showError(response.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫£i b√†i vi·∫øt', page);
                        }
                    },
                    error: function (xhr) {
                        console.error('L·ªói khi t·∫£i b√†i vi·∫øt:', xhr);
                        let errorMessage = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.';
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        showError(errorMessage, page);
                    },
                    complete: function () {
                        // ·∫®n overlay loading
                        $('#loading-overlay').addClass('d-none');
                        isLoading = false;
                    }
                });
            }

            function showError(message, page) {
                $('#articles-container').html(
                    `<div class="col-12 text-center">
                                        <div class="alert alert-danger" role="alert">
                                            ${message}
                                            <button class="btn btn-sm btn-outline-danger ms-2" onclick="loadArticles(${page})">
                                                <i class="bi bi-arrow-clockwise"></i> Th·ª≠ l·∫°i
                                            </button>
                                        </div>
                                    </div>`
                );
            }

            function attachPaginationEvents() {
                // X·ª≠ l√Ω click ph√¢n trang b·∫±ng ·ªßy quy·ªÅn s·ª± ki·ªán
                $('.pagination-link').off('click').on('click', function (e) {
                    e.preventDefault();

                    // B·ªè qua n·∫øu l√† link b·ªã v√¥ hi·ªáu h√≥a ho·∫∑c trang hi·ªán t·∫°i
                    if ($(this).parent().hasClass('disabled') || $(this).parent().hasClass('active')) {
                        return;
                    }

                    const page = $(this).data('page');
                    loadArticles(page);
                });
            }

            // G·∫Øn s·ª± ki·ªán khi trang ƒë∆∞·ª£c t·∫£i l·∫ßn ƒë·∫ßu
            attachPaginationEvents();

            // X·ª≠ l√Ω n√∫t back/forward c·ªßa tr√¨nh duy·ªát
            $(window).on('popstate', function (e) {
                const url = new URL(window.location.href);
                const page = parseInt(url.searchParams.get('page')) || 1;
                loadArticles(page);
            });
        });
    </script>
}